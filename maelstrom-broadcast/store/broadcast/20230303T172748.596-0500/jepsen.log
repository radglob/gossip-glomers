2023-03-03 17:27:48,607{GMT}	INFO	[jepsen test runner] jepsen.core: Test version 107bec742b20def7dd46ccfa2f0a350c542ba4cf (plus uncommitted changes)
2023-03-03 17:27:48,607{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin /home/jln/.go/bin/maelstrom-broadcast --node-count 1 --time-limit 20 --rate 10
2023-03-03 17:27:48,652{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x4a03c4bc"
         "maelstrom.db$db$reify__16142@4a03c4bc"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x453ca7f" "2023-03-03T17:27:48.596-05:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x5d41b929"
         "maelstrom.net$jepsen_net$reify__15251@5d41b929"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x6dd0e2f4"
         "maelstrom.workload.broadcast$client$reify__16644@6dd0e2f4"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x333813e7"
         "java.util.concurrent.CyclicBarrier@333813e7"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x292237cd"
         "jepsen.checker$compose$reify__11881@292237cd"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "/home/jln/.go/bin/maelstrom-broadcast"
  "--node-count"
  "1"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@797a5b31"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@13d7d1a8"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/home/jln/.go/bin/maelstrom-broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x72e4905c"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@72e4905c"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x279b83ea"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@279b83ea"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 1,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x40f40221"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@40f40221"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x16441c13"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@16441c13"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x6d3b59e2"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x164dfad2"
         "maelstrom.net$jepsen_os$reify__15254@164dfad2"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-03-03 17:27:49,726{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-03-03 17:27:49,726{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-03-03 17:27:49,727{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-03-03 17:27:49,729{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-03-03 17:27:49,729{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-03-03 17:27:49,730{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /home/jln/.go/bin/maelstrom-broadcast []
2023-03-03 17:27:49,740{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-03-03 17:27:49,749{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:read	nil
2023-03-03 17:27:49,750{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:read	[]
2023-03-03 17:27:49,862{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:broadcast	0
2023-03-03 17:27:49,868{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 0 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 0, :msg_id 2}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 2, :message 0, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:50,052{GMT}	INFO	[jepsen worker 0] jepsen.util: 1	:invoke	:broadcast	1
2023-03-03 17:27:50,056{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 1 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 1, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 1, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:50,230{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:broadcast	2
2023-03-03 17:27:50,235{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 2 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 2, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 2, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:50,430{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-03-03 17:27:50,432{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:ok	:read	[0 0 0 0 1 2]
2023-03-03 17:27:50,588{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-03-03 17:27:50,589{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:ok	:read	[0 0 0 0 1 2]
2023-03-03 17:27:50,659{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-03-03 17:27:50,660{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:ok	:read	[0 0 0 0 1 2]
2023-03-03 17:27:50,814{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:read	nil
2023-03-03 17:27:50,815{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:ok	:read	[0 0 0 0 1 2]
2023-03-03 17:27:50,954{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:broadcast	3
2023-03-03 17:27:50,958{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 3 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 3, :msg_id 5}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 5, :message 3, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:51,092{GMT}	INFO	[jepsen worker 0] jepsen.util: 4	:invoke	:read	nil
2023-03-03 17:27:51,093{GMT}	INFO	[jepsen worker 0] jepsen.util: 4	:ok	:read	[0 0 0 0 2 3 0 1]
2023-03-03 17:27:51,277{GMT}	INFO	[jepsen worker 0] jepsen.util: 4	:invoke	:broadcast	4
2023-03-03 17:27:51,280{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 4 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 4, :msg_id 2}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 2, :message 4, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:51,286{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:invoke	:read	nil
2023-03-03 17:27:51,287{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:ok	:read	[0 0 0 0 0 0 1 2 3 4]
2023-03-03 17:27:51,442{GMT}	INFO	[jepsen worker 0] jepsen.util: 5	:invoke	:broadcast	5
2023-03-03 17:27:51,446{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 5 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 5, :msg_id 2}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 2, :message 5, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:51,493{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:read	nil
2023-03-03 17:27:51,494{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:ok	:read	[0 0 0 0 0 0 1 2 3 4 5 0]
2023-03-03 17:27:51,625{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:read	nil
2023-03-03 17:27:51,626{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:ok	:read	[0 0 0 0 0 0 0 1 2 3 4 5]
2023-03-03 17:27:51,811{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:broadcast	6
2023-03-03 17:27:51,816{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 6 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 6, :msg_id 3}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 3, :message 6, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:51,826{GMT}	INFO	[jepsen worker 0] jepsen.util: 7	:invoke	:broadcast	7
2023-03-03 17:27:51,829{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 7 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 7, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 7, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:51,904{GMT}	INFO	[jepsen worker 0] jepsen.util: 8	:invoke	:broadcast	8
2023-03-03 17:27:51,908{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 8 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 8, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 8, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:52,043{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:broadcast	9
2023-03-03 17:27:52,048{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 9 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 9, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 9, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:52,064{GMT}	INFO	[jepsen worker 0] jepsen.util: 10	:invoke	:broadcast	10
2023-03-03 17:27:52,068{GMT}	WARN	[jepsen worker 0] jepsen.generator.interpreter: Process 10 crashed
clojure.lang.ExceptionInfo: Malformed RPC response. Maelstrom sent node n0 the following request:

{:type "broadcast", :message 10, :msg_id 1}

And expected a response of the form:

{:type (eq "broadcast_ok"), {:k :msg_id} Int, :in_reply_to Int}

... but instead received

{:in_reply_to 1, :message 10, :type "broadcast_ok"}

This is malformed because:

{:message disallowed-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$check_body.invokeStatic(client.clj:188)
	at maelstrom.client$check_body.invoke(client.clj:181)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$fn__16565$broadcast_BANG___16566.invoke(broadcast.clj:27)
	at maelstrom.workload.broadcast$client$reify__16644.invoke_BANG_(broadcast.clj:203)
	at jepsen.client.Validate.invoke_BANG_(client.clj:83)
	at jepsen.generator.interpreter.ClientWorker.invoke_BANG_(interpreter.clj:65)
	at jepsen.generator.interpreter$spawn_worker$fn__12908$fn__12909.invoke(interpreter.clj:140)
	at jepsen.generator.interpreter$spawn_worker$fn__12908.invoke(interpreter.clj:123)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-03-03 17:27:52,184{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
